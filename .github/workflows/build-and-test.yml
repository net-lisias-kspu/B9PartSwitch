name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      ksp-version: ${{ env.KSP_VERSION }}
      release-package-name: ${{ steps.set-release-package-name.outputs.release-package-name }}
      release-changelog: ${{ steps.extract-single-changelog.outputs.changelog-single }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - name: Fetch tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Describe current revision with tags
        id: describe-tags
        run: |
          export GIT_TAGISH="$(git describe --tags)"
          echo "${GIT_TAGISH}"
          echo "::set-output name=git-tagish::${GIT_TAGISH}"
      - name: Install Ruby
        uses: actions/setup-ruby@v1
      - name: Install NuGet
        uses: nuget/setup-nuget@v1
      - name: Install Gems
        run: bundle install
      - name: Install NuGet packages
        run: nuget restore
      - name: Set KSP Version
        run: |
          echo "::set-env name=KSP_VERSION::$(cat KSP_VERSION)"
          echo "${KSP_VERSION}"
      - name: Download KSP DLLs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DLL_S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DLL_S3_SECRET_ACCESS_KEY }}
        run: aws s3 cp s3://blowfish-ksp-dlls/ksp-${{ env.KSP_VERSION }}.zip '/tmp/KSP_DLLs.zip'
      - name: Set KSP DLL path
        run: echo "::set-env name=KSP_DLL_PATH::/opt/ksp/assembly/${KSP_VERSION}"
      - name: Extract KSP DLLs
        run: |
          mkdir -p "${KSP_DLL_PATH}"
          unzip '/tmp/KSP_DLLs.zip' -d "${KSP_DLL_PATH}"
          rm '/tmp/KSP_DLLs.zip'
      - name: Run Rubocop
        run: bundle exec rubocop
      - name: Compile Project
        run: msbuild /p:Configuration=Release /p:ReferencePath="${KSP_DLL_PATH}" B9PartSwitch.sln
      - name: Run Unit Tests
        run: mono packages/xunit.runner.console.*/tools/net471/xunit.console.exe B9PartSwitchTests/bin/Release/B9PartSwitchTests.dll
      - name: Extract Changelog
        run: |
          curl 'https://raw.githubusercontent.com/wiki/blowfishpro/B9PartSwitch/Changelog.md' -o "${RUNNER_TEMP}/B9PartSwitch-Changelog-all.md"
          bundle exec extract-changelog -u "$(git describe --tags)" -i "${RUNNER_TEMP}/B9PartSwitch-Changelog-all.md" -o "${RUNNER_TEMP}/B9PartSwitch-Changelog-current.md"
      - name: Extract changelog for current release
        id: extract-single-changelog
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          bundle exec extract-changelog -s "$(git describe --tags)" -i "${RUNNER_TEMP}/B9PartSwitch-Changelog-all.md" -o "${RUNNER_TEMP}/B9PartSwitch-Changelog-Single.md"
          cat "${RUNNER_TEMP}/B9PartSwitch-Changelog-Single.md"
          echo "::set-output name=changelog-single::$(cat "${RUNNER_TEMP}/B9PartSwitch-Changelog-Single.md")"
      - name: Create version file
        id: create-version-file
        run: |
          export VERSION_FILE="${RUNNER_TEMP}/B9PartSwitch.version"
          bundle exec fill-version "${GITHUB_WORKSPACE}/templates/B9PartSwitch.version.erb" "${VERSION_FILE}"
          echo "::set-output name=version-file::${VERSION_FILE}"
      - name: Set release directory
        run: |
          RELEASE_DIR="${RUNNER_TEMP}/release"
          echo "Release dir: ${RELEASE_DIR}"
          mkdir -v "${RELEASE_DIR}"
          echo "::set-env name=RELEASE_DIR::${RELEASE_DIR}"
      - name: Assemble Release
        run: |
          cp -v -R "${GITHUB_WORKSPACE}/GameData" "${RELEASE_DIR}"
          cp -v "${GITHUB_WORKSPACE}/README.md" "${RELEASE_DIR}"
          cp -v "${GITHUB_WORKSPACE}/LICENSE" "${RELEASE_DIR}"
          cp -v "${RUNNER_TEMP}/B9PartSwitch-Changelog-current.md" "${RELEASE_DIR}/CHANGELOG.md"
          cp -v "${GITHUB_WORKSPACE}/README.md" "${RELEASE_DIR}/GameData/B9PartSwitch"
          cp -v "${GITHUB_WORKSPACE}/LICENSE" "${RELEASE_DIR}/GameData/B9PartSwitch"
          cp -v "${RUNNER_TEMP}/B9PartSwitch-Changelog-current.md" "${RELEASE_DIR}/GameData/B9PartSwitch/CHANGELOG.md"
          cp -v "${{ steps.create-version-file.outputs.version-file }}" "${RELEASE_DIR}/GameData/B9PartSwitch/B9PartSwitch.version"
      - name: Set release package name
        id: set-release-package-name
        run: echo "::set-output name=release-package-name::B9PartSwitch_${{ steps.describe-tags.outputs.git-tagish }}"
      - name: Upload result as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.set-release-package-name.outputs.release-package-name }}
          path: ${{ env.RELEASE_DIR }}
      - name: Verify result
        run: bundle exec rake spec
  release:
    name: Release
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download release package artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ needs.build-and-test.outputs.release-package-name }}
      - name: Package release
        id: package-release
        working-directory: ${{ needs.build-and-test.outputs.release-package-name }}
        run: |
          export RELEASE_FILENAME="${{ needs.build-and-test.outputs.release-package-name }}".zip
          echo "Release filename: ${RELEASE_FILENAME}"
          zip -v -r "${RELEASE_FILENAME}" *
          echo "::set-output name=release-package-filename::${RELEASE_FILENAME}"
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: B9PartSwitch ${{ github.ref }} for KSP ${{ needs.build-and-test.outputs.ksp-version }}
          body: ${{ needs.build-and-test.outputs.release-changelog }}
      - name: Upload package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ steps.package-release.outputs.release-package-filename }}
          asset_name: ${{ steps.package-release.outputs.release-package-filename }}
          asset_content_type: application/zip
      - name: Print release url
        run: echo "Release successful!  You can view it at ${{ steps.create-release.outputs.html_url }}"
