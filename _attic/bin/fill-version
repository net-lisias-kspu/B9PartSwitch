#!/usr/bin/env ruby
# frozen_string_literal: true

require 'erb'
require 'getoptlong'
require 'json'
require 'open3'

VERSION = '1.1.0'

class Version
  def initialize(str)
    @version_list = str.split('.').map(&:to_i)
  end

  def major
    @version_list[0]
  end

  def minor(override = nil)
    @version_list[1] || override
  end

  def patch(override = nil)
    @version_list[2] || override
  end

  def build(override = nil)
    @version_list[3] || override
  end

  def [](index, override = nil)
    @version_list[index] || override
  end

  def to_s(length = nil)
    length = @version_list.size if length.nil?
    Array.new(length) do |i|
      @version_list[i] || 0
    end.join('.')
  end
end

FillVersionViewModel = Struct.new(:ksp_version, :ksp_version_min, :ksp_version_max, :mod_version, :git_version) do
  def render(template)
    ERB.new(template).result(binding)
  end
end

class CommandFailure < StandardError; end

def run(command)
  stdout, _stderr, status = Open3.capture3(command)
  raise CommandFailure, "Command `#{command}` exited with code #{status.exitstatus}" unless status.success?
  stdout
end

def usage
  STDERR.puts <<~USAGE
    usage: #{File.basename(__FILE__)} [in_erb_file] [out_file] [options]
      -h, --help                       print help
      --version                        print the version
      -k, --ksp-version [ksp version]  KSP version
      -m, --mod-version [mod version]  mod version
      -v, --verbose                    verbose logging
  USAGE
end

opts = GetoptLong.new(
  ['--help', '-h', GetoptLong::NO_ARGUMENT],
  ['--ksp-version', '-k', GetoptLong::REQUIRED_ARGUMENT],
  ['--mod-version', '-m', GetoptLong::REQUIRED_ARGUMENT],
  ['--verbose', '-v', GetoptLong::NO_ARGUMENT],
  ['--version', GetoptLong::NO_ARGUMENT],
)

ksp_version = nil
ksp_version_min = nil
ksp_version_max = nil
mod_version = nil
verbose = false
in_file = nil
out_file = nil

opts.each do |opt, arg|
  case opt
  when '--help'
    usage
    exit
  when '--ksp-version'
    ksp_version = arg
  when '--mod-version'
    mod_version = arg
  when '--verbose'
    verbose = true
  when '--version'
    puts VERSION
    exit
  end
end

case ARGV.size
when 0
  nil
when 1
  in_file = ARGV[0]
when 2
  in_file = ARGV[0]
  out_file = ARGV[1]
else
  STDERR.puts('Error: Too many arguments')
  usage
  exit 1
end

ksp_version_json = File.file?('KSP_VERSION.json') ? JSON.parse(File.read('KSP_VERSION.json')) : nil

ksp_version ||= ENV['KSP_VERSION']
ksp_version ||= ksp_version_json['KSP_VERSION'] unless ksp_version_json.nil?
ksp_version ||= File.read('KSP_VERSION') if File.file? 'KSP_VERSION'

ksp_version_min ||= ENV['KSP_VERSION_MIN']
ksp_version_min ||= ksp_version_json['KSP_VERSION_MIN'] unless ksp_version_json.nil?
ksp_version_min ||= ksp_version

ksp_version_max ||= ENV['KSP_VERSION_MAX']
ksp_version_max ||= ksp_version_json['KSP_VERSION_MAX'] unless ksp_version_json.nil?
ksp_version_max ||= ksp_version

ksp_version ||= ksp_version_max

if ksp_version.nil?
  STDERR.puts 'ksp version not specified and no way to determine it'
  exit 1
end

ksp_version = Version.new(ksp_version)
ksp_version_min = Version.new(ksp_version_min) unless ksp_version_min.nil?
ksp_version_max = Version.new(ksp_version_max) unless ksp_version_max.nil?

is_git_dir =
  begin
    run('git rev-parse --git-dir')
    true
  rescue CommandFailure
    false
  end

git_version = is_git_dir ? run('git describe --tags --dirty').strip : nil

mod_version =
  if !mod_version.nil?
    Version.new(mod_version)
  elsif ENV['MOD_VERSION']
    Version.new(ENV['MOD_VERSION'])
  elsif is_git_dir
    Version.new(git_version.match(/[0-9\.-]+/)[0].tr('-', '.'))
  else
    STDERR.puts 'mod version not specified and no way to determine it'
    exit 1
  end

if verbose
  STDERR.puts "#{__FILE__}: filling version info into ERB template"
  STDERR.puts "#{__FILE__}: ksp version: #{ksp_version}"
  STDERR.puts "#{__FILE__}: ksp version max: #{ksp_version_max}"
  STDERR.puts "#{__FILE__}: ksp version min: #{ksp_version_min}"
  STDERR.puts "#{__FILE__}: mod version: #{mod_version}"
  STDERR.puts "#{__FILE__}: '#{in_file || 'STDIN'}' -> '#{out_file || 'STDOUT'}'"
end

template_contents =
  if in_file.nil?
    STDIN.read
  elsif File.file?(in_file)
    File.read(in_file)
  else
    STDERR.puts "file does not exist: '#{in_file}'"
    exit 1
  end

view_model = FillVersionViewModel.new(ksp_version, ksp_version_min, ksp_version_max, mod_version, git_version)
result = view_model.render(template_contents)

if out_file.nil?
  STDOUT.puts result
else
  File.open(out_file, 'w+') do |f|
    f.write result
  end
end
